@model PFD_Assignment.Models.Post

@{
    ViewData["Title"] = "Create";
}

<h4 class="PageTitle">Create guide</h4>
<hr />

<form asp-action="Create" method="post" onsubmit="return validatePostContent()" id="createForm">

    <fieldset class="FormContent">
        <div class="row mb-3 create-fields">
            <label asp-for="PostTitle" class="col-sm-3 col-form-label"></label>
            <div class="col-sm-9 col-md-5">
                <input asp-for="PostTitle" class="form-control" />
                <span asp-validation-for="PostTitle" class="text-danger"></span>
            </div>
        </div>
        <div class="row mb-3 create-fields">
            <label asp-for="PostDesc" class="col-sm-3 col-form-label"></label>
            <div class="col-sm-9 col-md-5">
                <input asp-for="PostDesc" class="form-control" />
                <span asp-validation-for="PostDesc" class="text-danger"></span>
            </div>
        </div>
        <div class="row mb-3 create-fields">
            <label asp-for="VideoLink" class="col-sm-3 col-form-label"></label>
            <div class="col-sm-9 col-md-5">
                <input asp-for="VideoLink" class="form-control" />
                <span asp-validation-for="VideoLink" class="text-danger"></span>
            </div>
        </div>
        <div class="row mb-3 create-fields">
            <label asp-for="PostContent" class="col-sm-3 col-form-label" id="PostContent"></label>
            <div class="col-sm-9 col-md-5" style="display: flex; flex-direction: column; align-items: flex-start;">
                <textarea asp-for="PostContent" class="form-control" id="postContentInput" style="flex-grow: 1; box-sizing: border-box; height: 100px"></textarea>
                <span asp-validation-for="PostContent" class="text-danger"></span>
            </div>
            <div id="postContentValidation" class="text-danger"></div>
        </div>

        <div class="row mb-3">
            <div class="col-sm-6 offset-sm-6">
                <div id="apiKeyContainer" data-api-key="@ViewBag.ApiKey">
                    <button type="button" class="btn btn-success" id="validateButton">Validate</button>
                    <input type="submit" value="Create" class="btn btn-primary" id="submitButton" disabled />
                    <button asp-action="Index" class="btn btn-danger">Return back</button>
                </div>
            </div>
        </div>
    </fieldset>
</form>

<script defer>
    document.addEventListener('DOMContentLoaded', function () {
        // Your JavaScript code here
        function validatePostContent() {
            const postContentInput = document.getElementById('postContentInput');
            const postContentValidation = document.getElementById('postContentValidation');
            const submitButton = document.getElementById('submitButton');
            // Get the value of the PostContent input
            const text = postContentInput.value;
            // Call OpenAI model
            callOpenAIModel(text)
                .then(response => {
                    // Handle the response data and update validation message
                    console.log(response.data.choices[0].text);
                    if (
                        response.data.choices &&
                        response.data.choices.length > 0 &&
                        response.data.choices[0].text.toLowerCase().includes('content approved')
                    ) {
                        postContentValidation.textContent = 'Content Approved';
                        submitButton.disabled = false;
                    } else if (
                        response.data.choices &&
                        response.data.choices.length > 0 &&
                        response.data.choices[0].text.toLowerCase().includes('content rejected')
                    ) {
                        postContentValidation.textContent = 'Content rejected';
                        submitButton.disabled = true;
                    } else {
                        postContentValidation.textContent = 'Error. Please try again.';
                        submitButton.disabled = true;
                    }
                })
                .catch(error => {
                    // Handle errors
                    console.error('Error:', error.message);
                    submitButton.disabled = true;
                });
        }

        function callOpenAIModel(text) {
            const apiKeyContainer = document.getElementById('apiKeyContainer');
            const apiKey = apiKeyContainer.dataset.apiKey;
            const endpoint = 'https://api.openai.com/v1/completions';
            const requestData = {
                model: 'gpt-3.5-turbo-instruct',
                prompt: `If the provided text contains harmful, dangerous, unethical content, swear words, gibberish or not in English, respond only with the words: Content rejected.
                     If the text given is untrue in nature for example: Singpass is made in Malaysia or Singpass is commonly used in Malaysia, respond only with the words: Content rejected.
                     Otherwise, respond only with the words: Content Approved. The provided text: ${text}`,
                max_tokens: 10,
                user: 'user123456'
            };

            return axios({
                method: 'post',
                url: endpoint,
                data: requestData,
                headers: {
                    'Authorization': `Bearer ${apiKey}`,
                    'Content-Type': 'application/json'
                }
            });
        }

        // Register click event handler for the button
        document.getElementById('validateButton').addEventListener('click', validatePostContent);
    });
</script>

